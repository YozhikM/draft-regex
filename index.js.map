{"version":3,"sources":["src/clearEmptyBlocks.js","src/clearPastedStyle.js","src/index.js","src/replaceTextRegex.js","src/rules.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport { EditorState, SelectionState, ContentState } from 'draft-js';\n\nfunction getEmptyCountBefore(contentState: ContentState, key: string): number {\n  const block = contentState.getBlockBefore(key);\n  if (block && block.getText() === '') {\n    return 1 + getEmptyCountBefore(contentState, block.getKey());\n  }\n  return 0;\n}\n\nfunction getEmptyCountAfter(contentState: ContentState, key: string): number {\n  const block = contentState.getBlockAfter(key);\n  if (block && block.getText() === '') {\n    return 1 + getEmptyCountAfter(contentState, block.getKey());\n  }\n  return 0;\n}\n\nexport default function clearEmptyBlocks(editorState: EditorState, maxEmptyLines?: number = 2): EditorState {\n  const CS = editorState.getCurrentContent();\n  const SS = editorState.getSelection();\n  const currentKey = SS.getFocusKey();\n  const currentBlock = CS.getBlockForKey(currentKey);\n\n  const emptyBefore = getEmptyCountBefore(CS, currentKey);\n  const emptyAfter = getEmptyCountAfter(CS, currentKey);\n\n  // Be carefull, all checks are very important. And its order of checks also important.\n  // 1. Check hole above current line\n  // 2. Check hole below current line\n  // 3. Check hole between two non-empty lines\n  if (\n    emptyBefore > maxEmptyLines ||\n    emptyAfter > maxEmptyLines ||\n    (emptyBefore + emptyAfter >= maxEmptyLines &&\n      currentBlock.getText() === '' &&\n      currentBlock !== CS.getLastBlock())\n  ) {\n    let keyForRemove;\n    let keyForFocus;\n    if (currentBlock.getText() === '') {\n      keyForRemove = currentKey;\n      keyForFocus = CS.getKeyBefore(currentKey);\n    } else {\n      keyForRemove = CS.getKeyBefore(currentKey);\n      keyForFocus = currentKey;\n    }\n\n    const newBlockMap = CS.getBlockMap().delete(keyForRemove);\n    const newCS: ContentState = new ContentState({ blockMap: newBlockMap });\n    const newEditorState = EditorState.createWithContent(newCS);\n    const newSS = SelectionState.createEmpty(keyForFocus || newCS.getFirstBlock().getKey());\n    const ES = EditorState.forceSelection(newEditorState, newSS);\n\n    return ES;\n  }\n\n  return editorState;\n}\n","/* @flow */\n\nimport { EditorState, ContentState, ContentBlock } from 'draft-js';\nimport { createContentBlock } from './replaceTextRegex';\n\nexport default function clearPastedStyle(\n  editorState: EditorState,\n  options?: {\n    blockTypes?: Array<string>,\n    replaceHeader?: boolean,\n    shiftHeader?: string,\n    replaceList?: boolean,\n    shiftList?: string,\n  },\n): EditorState {\n  const CS = editorState.getCurrentContent();\n  const SS = editorState.getSelection();\n  const { blockTypes, replaceHeader, shiftHeader, replaceList, shiftList } = options || {};\n\n  const blockMap = CS.getBlockMap().map((block: ContentBlock) => {\n    if (blockTypes && blockTypes.indexOf(block.type) === -1) {\n      return createContentBlock(block, { type: 'unstyled' });\n    }\n\t\n    if (replaceHeader && block.type.slice(0, 6) === 'header') {\n      return createContentBlock(block, { type: shiftHeader });\n    }\n\n    if (replaceList && block.type.slice(-4) === 'item') {\n      return createContentBlock(block, { type: shiftList });\n    }\n\t\n    if (!blockTypes) return createContentBlock(block, { type: 'unstyled' });\n\t\n\treturn block;\n  });\n  const newCS: ContentState = new ContentState({ blockMap });\n  const newEditorState = EditorState.createWithContent(newCS);\n  const ES = EditorState.forceSelection(newEditorState, SS);\n\n  return ES;\n}\n","/* @flow */\n\nimport clearEmptyBlocks from './clearEmptyBlocks';\nimport replaceTextRegex from './replaceTextRegex';\nimport clearPastedStyle from './clearPastedStyle';\n\nexport { clearEmptyBlocks, replaceTextRegex, clearPastedStyle };\n","/* @flow */\n\nimport {\n  CharacterMetadata,\n  EditorState,\n  SelectionState,\n  ContentState,\n  ContentBlock,\n} from 'draft-js';\nimport { typoRules } from './rules';\n\nexport type Rule = { reg: RegExp, shift: string };\n\ntype Options = {\n  [key: string]: boolean,\n};\n\ntype OptionsObj = { [key: string]: Array<Rule> };\n\nconst optionRules: OptionsObj = {\n  extraSpaces: [\n    { reg: new RegExp(/\\s+/g), shift: ' ' }, // \"Extra spaces\"\n    { reg: new RegExp(/(^\\s*)|(\\s*)$/g), shift: '' },\n  ],\n  spacesAfterPunctuationMarks: [{ reg: new RegExp(/(,|\\.)(\\S)/g), shift: '$1 $2' }],\n};\n\nfunction createSelectionState(key: string, start: number = 0, end?: number): SelectionState {\n  return new SelectionState({\n    anchorKey: key,\n    anchorOffset: start,\n    focusKey: key,\n    focusOffset: end || start,\n  });\n}\n\nexport function createContentBlock(\n  block: ContentBlock,\n  options?: {\n    text?: string,\n    key?: string,\n    type?: string,\n    characterList?: Array<CharacterMetadata>,\n  },\n): ContentBlock {\n  const { text, key, type, characterList } = options || {};\n\n  return new ContentBlock({\n    text: text || block.getText(),\n    key: key || block.getKey(),\n    type: type || block.getType(),\n    characterList: characterList || block.getCharacterList(),\n  });\n}\n\nfunction prepareOptionableRules(options: Options): Array<Rule> {\n  const acc: Array<Rule> = [];\n  Object.keys(options).forEach(key => {\n    acc.push(...optionRules[key]);\n    return acc;\n  });\n  if (acc.length > 0) return acc;\n  return [];\n}\n\nexport default function replaceTextRegex(\n  editorState: EditorState,\n  rulesArray?: Array<Rule> = typoRules,\n  options?: Options = { extraSpaces: true },\n): EditorState {\n  const CS = editorState.getCurrentContent();\n  const CSMap = CS.getBlockMap();\n  const CSText = CS.getPlainText();\n\n  const optionableRules: Array<Rule> = [];\n  if (options) {\n    const preparedRules = prepareOptionableRules(options);\n    optionableRules.push(...preparedRules);\n  }\n  const rules = options ? rulesArray.concat(optionableRules) : rulesArray;\n\n  let rule;\n  const match = rules.some(typoRule => {\n    rule = typoRule;\n    return typoRule && typoRule.reg.exec(CSText);\n  });\n\n  if (match) {\n    const { reg, shift } = rule || {};\n\n    const SS = editorState.getSelection();\n    const key = SS.getAnchorKey();\n    const anchorOffset = SS.getAnchorOffset();\n    const currentContentBlock = CS.getBlockForKey(key);\n    const text = currentContentBlock.getText().replace(reg, shift);\n    const newBlock = createContentBlock(currentContentBlock, {\n      text,\n      key,\n    });\n\n    const diffInLengths = currentContentBlock.getLength() - newBlock.getLength();\n    const newSS = createSelectionState(key, anchorOffset - diffInLengths);\n\n    const newBlockMap = CSMap.set(key, newBlock);\n    const newCS: ContentState = new ContentState({ blockMap: newBlockMap });\n    const ES = EditorState.createWithContent(newCS);\n    const forceES = EditorState.forceSelection(ES, newSS);\n    const forceESText = forceES.getCurrentContent().getPlainText();\n\n    if (forceESText !== CSText) {\n      return forceES;\n    }\n    return editorState;\n  }\n  return editorState;\n}\n","/* @flow */\n\nimport type { Rule } from './replaceTextRegex';\n\nexport const typoRules: Array<Rule> = [\n  { reg: new RegExp(/\"([^\"]+)\"/g), shift: '«$1»' },\n  { reg: new RegExp(/(\\() +/g), shift: '(' }, // \"Удаление лишних пробелов\n  { reg: new RegExp(/ +\\)/g), shift: ')' }, // после открывающей и перед закрывающей скобкой\"\n  { reg: new RegExp(/(\\d)( |\\u00A0)(%|‰|‱)/g), shift: '$1$3' }, // \"Удаление пробела перед %, ‰ и ‱\"\n  { reg: new RegExp(/\\(r\\)/gi), shift: '®' },\n  { reg: new RegExp(/(copyright )?\\((c|с)\\)/gi), shift: '©' },\n  { reg: new RegExp(/\\(tm\\)/gi), shift: '™' }, // \"(c) → ©, (tm) → ™, (r) → ®\"\n  { reg: new RegExp(/<[^>]+>/g), shift: '' }, // \"Удаление HTML-тегов\"\n  { reg: new RegExp(/(^|\\D)1\\/2(\\D|$)/g), shift: '$1½$2' },\n  { reg: new RegExp(/(^|\\D)1\\/4(\\D|$)/g), shift: '$1¼$2' },\n  { reg: new RegExp(/(^|\\D)3\\/4(\\D|$)/g), shift: '$1¾$2' }, // \"1/2 → ½, 1/4 → ¼, 3/4 → ¾\"\n  { reg: new RegExp(/!=/g), shift: '≠' },\n  { reg: new RegExp(/<=/g), shift: '≤' },\n  { reg: new RegExp(/(^|[^=])>=/g), shift: '$1≥' },\n  { reg: new RegExp(/<</g), shift: '≪' },\n  { reg: new RegExp(/>>/g), shift: '≫' },\n  { reg: new RegExp(/~=/g), shift: '≅' },\n  { reg: new RegExp(/(^|[^+])\\+-/g), shift: '$1±' },\n  { reg: new RegExp(/([!?]) (?=[!?])/g), shift: '$1' },\n  // { reg: new RegExp(/(^|[^!?:;,.…]) ([!?:;,.])(?!\\))/g), shift: '$1$2' },\n  // { reg: new RegExp(/\\n[ \\t]+/g), shift: '\\n' },\n  { reg: new RegExp(/(^|[^.])(\\.\\.\\.|…),/g), shift: '$1…' },\n  { reg: new RegExp(/(!|\\?)(\\.\\.\\.|…)(?=[^.]|$)/g), shift: '$1..' }, // \"«?…» → «?..», «!…» → «!..», «…,» → «…»\"\n  { reg: new RegExp(/([а-яё])(\\.\\.\\.|…)([А-ЯЁ])/g), shift: '$1$2 $3' },\n  // { reg: new RegExp(/([?!]\\.\\.)([а-яёa-z])/gi), shift: '$1 $2' }, // \"Пробел после «...», «!..» и «?..»\"\n  { reg: new RegExp(/[«'\"„“]([^\"'“]*(?:«»[^'\"“]*)*)['\"»“„]/g), shift: '«$1»' },\n  // { reg: new RegExp(), shift: '' },\n];\n"]}